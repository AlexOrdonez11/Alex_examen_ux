{"version":3,"sources":["logo.svg","components/Navigator.js","components/Image.js","components/Like.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigator","className","href","Component","Image","src","logo","alt","Like","state","likes","Increment","bind","this","setState","aling","onClick","TodoForm","title","responsible","description","priority","handleInputChange","handleSubmit","e","preventDefault","props","onAddTodo","target","value","name","console","log","mt-4","onSubmit","type","onChange","placeholder","App","todos","handleAddTodo","index","filter","i","todo","map","key","removeTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a74c93cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.446f4997.svg\";","import React, { Component } from 'react';\r\n\r\nclass Navigator extends Component {\r\n  render(){\r\n    return(\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          Noticias\r\n        </a>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navigator;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\n\r\nclass Image extends Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <br/>\r\n        <br/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport './Like.css';\r\n\r\nclass Like extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      likes: 0\r\n    };\r\n    this.Increment=this.Increment.bind(this);\r\n  }\r\n  Increment(){\r\n    this.setState({\r\n      likes: this.state.likes+1\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"right\">\r\n        <span className=\"badge badge-pill badge-success\" aling=\"right\">\r\n          {this.state.likes}\r\n        </span>\r\n        <button className=\"btn btn-primary\" onClick={this.Increment.bind()}>\r\n          like\r\n        </button>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Like;\r\n","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const {value, name} = e.target;\r\n    console.log(value, name);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\" mt-4>\r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Title\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"responsible\"\r\n              className=\"form-control\"\r\n              value={this.state.responsible}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Responsible\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Description\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n                name=\"priority\"\r\n                className=\"form-control\"\r\n                value={this.state.priority}\r\n                onChange={this.handleInputChange}\r\n              >\r\n              <option>low</option>\r\n              <option>medium</option>\r\n              <option>high</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigator from './components/Navigator';\nimport Image from './components/Image';\nimport Like from './components/Like';\n\n// data\nimport { todos } from './Todos.json';\n\n// subcomponents\nimport TodoForm from './components/TodoForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    }\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  removeTodo(index) {\n    this.setState({\n      todos: this.state.todos.filter((e, i) => {\n        return i !== index\n      })\n    });\n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-6\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-title text-center\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              {todo.description}\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}>\n                Delete\n              </button>\n              <Like/>\n            </div>\n          </div>\n        </div>\n      )\n    });\n\n    // RETURN THE COMPONENT\n    return (\n      <div className=\"App\">\n\n        <Navigator />\n\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-4 text-center\">\n              <Image/>\n              <TodoForm onAddTodo={this.handleAddTodo}></TodoForm>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                {todos}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}